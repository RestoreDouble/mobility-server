// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mobility-server/ent/customer"
	"mobility-server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CustomerUpdate) SetCreatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCreatedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUpdatedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CustomerUpdate) SetPhone(i int) *CustomerUpdate {
	cu.mutation.ResetPhone()
	cu.mutation.SetPhone(i)
	return cu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhone(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetPhone(*i)
	}
	return cu
}

// AddPhone adds i to the "phone" field.
func (cu *CustomerUpdate) AddPhone(i int) *CustomerUpdate {
	cu.mutation.AddPhone(i)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *CustomerUpdate) SetFirstName(s string) *CustomerUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableFirstName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *CustomerUpdate) SetLastName(s string) *CustomerUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableLastName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// ClearLastName clears the value of the "last_name" field.
func (cu *CustomerUpdate) ClearLastName() *CustomerUpdate {
	cu.mutation.ClearLastName()
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableEmail(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CustomerUpdate) ClearEmail() *CustomerUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cu *CustomerUpdate) SetDateOfBirth(t time.Time) *CustomerUpdate {
	cu.mutation.SetDateOfBirth(t)
	return cu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDateOfBirth(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetDateOfBirth(*t)
	}
	return cu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (cu *CustomerUpdate) ClearDateOfBirth() *CustomerUpdate {
	cu.mutation.ClearDateOfBirth()
	return cu
}

// SetIsNew sets the "is_new" field.
func (cu *CustomerUpdate) SetIsNew(b bool) *CustomerUpdate {
	cu.mutation.SetIsNew(b)
	return cu
}

// SetNillableIsNew sets the "is_new" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIsNew(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetIsNew(*b)
	}
	return cu
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(customer.FieldPhone, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPhone(); ok {
		_spec.AddField(customer.FieldPhone, field.TypeInt, value)
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(customer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if cu.mutation.LastNameCleared() {
		_spec.ClearField(customer.FieldLastName, field.TypeString)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(customer.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.DateOfBirth(); ok {
		_spec.SetField(customer.FieldDateOfBirth, field.TypeTime, value)
	}
	if cu.mutation.DateOfBirthCleared() {
		_spec.ClearField(customer.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := cu.mutation.IsNew(); ok {
		_spec.SetField(customer.FieldIsNew, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CustomerUpdateOne) SetCreatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCreatedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUpdatedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CustomerUpdateOne) SetPhone(i int) *CustomerUpdateOne {
	cuo.mutation.ResetPhone()
	cuo.mutation.SetPhone(i)
	return cuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhone(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetPhone(*i)
	}
	return cuo
}

// AddPhone adds i to the "phone" field.
func (cuo *CustomerUpdateOne) AddPhone(i int) *CustomerUpdateOne {
	cuo.mutation.AddPhone(i)
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *CustomerUpdateOne) SetFirstName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableFirstName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *CustomerUpdateOne) SetLastName(s string) *CustomerUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableLastName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// ClearLastName clears the value of the "last_name" field.
func (cuo *CustomerUpdateOne) ClearLastName() *CustomerUpdateOne {
	cuo.mutation.ClearLastName()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableEmail(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CustomerUpdateOne) ClearEmail() *CustomerUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cuo *CustomerUpdateOne) SetDateOfBirth(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDateOfBirth(t)
	return cuo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDateOfBirth(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetDateOfBirth(*t)
	}
	return cuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (cuo *CustomerUpdateOne) ClearDateOfBirth() *CustomerUpdateOne {
	cuo.mutation.ClearDateOfBirth()
	return cuo
}

// SetIsNew sets the "is_new" field.
func (cuo *CustomerUpdateOne) SetIsNew(b bool) *CustomerUpdateOne {
	cuo.mutation.SetIsNew(b)
	return cuo
}

// SetNillableIsNew sets the "is_new" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIsNew(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetIsNew(*b)
	}
	return cuo
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(customer.FieldPhone, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPhone(); ok {
		_spec.AddField(customer.FieldPhone, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(customer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if cuo.mutation.LastNameCleared() {
		_spec.ClearField(customer.FieldLastName, field.TypeString)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(customer.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.DateOfBirth(); ok {
		_spec.SetField(customer.FieldDateOfBirth, field.TypeTime, value)
	}
	if cuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(customer.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := cuo.mutation.IsNew(); ok {
		_spec.SetField(customer.FieldIsNew, field.TypeBool, value)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
